<!-- rails' form for helper writes HTML code for us! Here, on pressing submit button, routes will send the request to posts controller which will see what needs to be done ahead -->


<!-- STYLING THE POST FORM -->

<div class="d-flex flex-column align-items-center mt-3">
	<div class="col-xl-7 col-lg-8 col-md-10 col-sm-11 post-card">
		<div class="card">
			<div class="card-header">
				Create Post			
			</div>
			<div class="card-body">
				<%= form_for @post, :html => {:multipart => true, :class => "dropzone upload-images p-0 border-0"} do |f| %>
					<div class="form-group row mt-2">
						<div class="col-auto pr-0">
							<%= image_tag avatar_url(current_user), class: "post-author-icon" %>
						</div>
						<div class="col pl-0">
							<%= f.text_field :content, class: "form-control border-0", placeholder: "Say something about this..." %>
						</div>
					</div>


<!-- If you want another name than file you can configure dropzone with the option paramName.

If you want your file uploads to work even without JavaScript, you can include an element with the class fallback that dropzone will remove if the browser is supported. If the browser isn’t supported, Dropzone will not create fallback elements if there is a fallback element already provided. (Obviously, if the browser doesn’t support JavaScript, the form will stay as is)

Typically this will look like this:

<form action="/file-upload" class="dropzone">
  <div class="fallback">
    <input name="file" type="file" multiple />
  </div>
</form> -->

		<div class="fallback">
			<%= file_field_tag "images[]", type: :file, multiple: true %>
		</div>
		<div class="dz-message m-0"></div>
			<div class="dropzone-previews mb-3">
				<div class="upload-photos-icon">
					<i class="fa fa-plus fa-2x" aria-hidden="true" style="color: #dddfe2"></i>
				</div>
			</div>
		<%= f.submit "Post", class: "btn btn-primary" %>
	<% end %>
</div>
		</div>

		<div id="posts">
			<%= render 'posts/posts_list' %>
		</div>


	</div>


</div>


